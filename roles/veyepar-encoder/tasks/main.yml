---
- name: install parts of veyepar for encoding
  apt:
    name: "{{ item }}"
  with_items:
  - build-essential
  - ffmpeg
  - gir1.2-gst-plugins-base-1.0
  - gir1.2-gstreamer-1.0
  - gstreamer1.0-plugins-bad
  - gstreamer1.0-plugins-base
  - gstreamer1.0-plugins-good
  - gstreamer1.0-plugins-ugly
  - gstreamer1.0-tools
  - gstreamer1.0-x
  - imagemagick
  - inkscape
  - libpq-dev
  - libpq5
  - mediainfo
  - mplayer
  - python-psycopg2
  - python3-dev
  - python3-gi
  - python3-venv
  - tesseract-ocr
  - tesseract-ocr-eng
  - tmux

#  pip install --upgrade pip
#
# 2to3 -w /srv/gw1/veyepar/ve/lib/python3.5/site-packages/steve
# 2to3 -w /srv/gw1/veyepar/ve/lib/python3.5/site-packages/vidscraper

- name: git clone veyepar
  git:
    repo: https://github.com/CarlFK/veyepar.git
    dest: "/home/{{ user_name }}/veyepar"
    depth: 1
  become: true
  become_user: "{{ user_name }}"

- name: copy local secret files to encoder node
  copy:
    src: "{{ veyepar_confs }}/{{ item }}"
    dest: "/home/{{ user_name }}/veyepar/{{ item }}"
  become: true
  become_user:  "{{ user_name }}"
  # owner:  "{{ user_name }}"
  # group:  "{{ user_name }}"
  with_items:
  - dj/dj/local_settings.py
  - dj/scripts/veyepar.cfg
  - dj/scripts/pw.py
  - dj/scripts/bling/{{ org }}/
  - dj/scripts/bling/ndv-169.png
    # - dj/scripts/client_secrets.json # only needed for yt upload
    # - dj/scripts/oauth2-{{ org }}.json

- name: veyepar ve py pip requirements
  pip:
    requirements: "/home/{{ user_name }}/veyepar/setup/nodes/encode/requirements.txt"
    virtualenv: "/home/{{ user_name }}/.virtualenvs/veyepar"
    virtualenv_command: pyvenv
    virtualenv_site_packages: true
    # extra_args: --upgrade
    state: forcereinstall
  become: true
  become_user:  "{{ user_name }}"

- name: configure veyepar
  template:
    src: "templates/veyepar.cfg.j2"
    dest: "/home/{{ user_name }}/veyepar.cfg"
    owner:  "{{ user_name }}"
    group:  "{{ user_name }}"

- name: create veyepar show dir
  # will be full of links
  file:
    path: "/home/{{ user_name }}/Videos/veyepar/{{ org }}/{{ show }}"
    state: directory
    recurse: true
    owner:  "{{ user_name }}"
    group:  "{{ user_name }}"

- name: link to local raw files (where Vocto is saving to)
  file:
    state: link
    src: "/srv/{% if room_name is not defined %}{{ nfs_server }}/{% endif %}video/{{ org }}/{{ show }}/dv"
    dest: "/home/{{ user_name }}/Videos/veyepar/{{ org }}/{{ show }}/dv"
    force: yes
    owner:  "{{ user_name }}"
    group:  "{{ user_name }}"

- name: links from local Video dir into nfs mount (for veyepar encoder to read/write)
  file:
    state: link
    src: "/srv/{{ nfs_server }}/video/{{ org }}/{{ show }}/{{ item }}"
    dest: "/home/{{ user_name }}/Videos/veyepar/{{ org }}/{{ show }}/{{ item }}"
    force: yes
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
  with_items:
  - assets
  - tmp
  - titles
  - custom
  - img
  - mlt
  - mp4
  - webm

# - name: one key script to activete VE and cd into veyepar scripts
- name: create ~/bin for the v script
  file:
    path: "/home/{{ user_name }}/bin"
    state: directory
    recurse: true
    owner:  "{{ user_name }}"
    group:  "{{ user_name }}"

- name: one key script to activete VE and cd into veyepar scripts
  copy:
    src: "files/v"
    dest: "/home/{{ user_name }}/bin/v"
    owner:  "{{ user_name }}"
    group:  "{{ user_name }}"
    mode: u+x
