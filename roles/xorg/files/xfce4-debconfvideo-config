#!/usr/bin/env python3

# Initialize XFCE4 config (if necessary) and configure some things, without
# xfconf.

from copy import deepcopy
from pathlib import Path
import shutil
import xml.etree.ElementTree as ET


def initialise_xfconf(filename, world=None):
    relative_path = Path('xfce4/xfconf/xfce-perchannel-xml') / filename
    if not world:
        world = Path('/etc/xdg') / relative_path

    user = Path('~/.config').expanduser() / relative_path
    if not user.exists():
        user.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy(str(world), str(user))

    return user


def keyboard_shortcuts():
    conf_p = initialise_xfconf('xfce4-keyboard-shortcuts.xml')

    tree = ET.parse(str(conf_p))
    root = tree.getroot()
    commands = root.find('property[@name="commands"]')

    # All user config lives in the custom block
    custom = commands.find('property[@name="custom"]')
    if custom is None:
        default = commands.find('property[@name="default"]')
        custom = deepcopy(default)
        custom.set('name', 'custom')
        commands.append(custom)

        override = ET.Element('property', {
            'name': 'override',
            'type': 'bool',
            'value': 'true',
        })
        custom.append(override)

    # Map Ctrl-Alt-T => xfce4-terminal
    if custom.find('property[@name="<Primary><Alt>t"]') is None:
        bind = ET.Element('property', {
            'name': '<Primary><Alt>t',
            'type': 'string',
            'value': 'xfce4-terminal',
        })
        custom.append(bind)

    tree.write(str(conf_p))


def panels():
    conf_p = initialise_xfconf(
        'xfce4-panel.xml',
        world='/etc/xdg/xfce4/panel/default.xml')

    tree = ET.parse(str(conf_p))
    root = tree.getroot()
    plugins = root.find('property[@name="plugins"]')
    panels = root.find('property[@name="panels"]')

    max_id = 0
    for plugin in plugins.findall('property'):
        name = plugin.get('name')
        id_ = int(name.split('-')[1])
        max_id = max(id_, max_id)

    def next_id(panel_id):
        nonlocal max_id
        max_id += 1
        value = ET.Element('value', {
            'type': 'int',
            'value': str(max_id),
        })
        panel = panels.find('property[@name="panel-%i"]' % panel_id)
        panel.find('property[@name="plugin-ids"]').append(value)
        return max_id

    def serialize(value):
        if isinstance(value, bool):
            return 'bool', str(value).lower()
        elif isinstance(value, int):
            return 'int', str(value)
        elif isinstance(value, str):
            return 'string', value
        else:
            raise NotImplemented("Can't serialize %r" % value)

    def add_item(panel_id, value, options=None):
        id_ = next_id(panel_id=panel_id)
        plugin = ET.Element('property', {
            'name': 'plugin-%i' % (id_),
            'type': 'string',
            'value': value,
        })
        plugins.append(plugin)

        if options is None:
            pass
        elif isinstance(options, dict):
            for key, value in options.items():
                type_, value = serialize(value)
                option = ET.Element('property', {
                    'name': key,
                    'type': type_,
                    'value': value,
                })
                plugin.append(option)

        elif isinstance(options, list):
            items = ET.Element('property', {
                'name': 'items',
                'type': 'array',
            })
            plugin.append(items)
            for value in options:
                type_, value = serialize(value)
                option = ET.Element('value', {
                    'type': type_,
                    'value': value,
                })
                items.append(option)
        else:
            raise ValueError("Options must be a dict, list, or None")

    if plugins.find('property[@value="pulseaudio"]') is None:
        add_item(1, 'pulseaudio', {'enable-keyboard-shortcuts': True})

        # There's no good way to detect these
        add_item(2, 'separator')
        add_item(2, 'launcher', ['voctogui.desktop'])
        add_item(2, 'launcher', ['hexchat.desktop'])
        add_item(2, 'launcher', ['videoteam-cutlist.desktop'])

    tree.write(str(conf_p))


def disable_workspaces():
    relative_path = Path('xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml')
    user = Path('~/.config').expanduser() / relative_path

    if not user.exists():
        with user.open('w') as f:
            f.write('''
<channel name="xfwm4" version="1.0">
  <property name="general" type="empty">
    <property name="workspace_count" type="int" value="1" />
    <property name="workspace_names" type="array">
      <value type="string" value="Workspace 1" />
    </property>
  </property>
</channel>
''')
        return

    tree = ET.parse(str(user))
    root = tree.getroot()
    general = root.find('property[@name="general"]')
    count = general.find('property[@name="workspace_count"]')
    count.set('value', '1')
    tree.write(str(user))


if __name__ == '__main__':
    keyboard_shortcuts()
    panels()
    disable_workspaces()
