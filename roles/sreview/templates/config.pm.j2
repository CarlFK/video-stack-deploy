# Set to truthy if anonymous reviews should be allowed, or to falsy if not
$anonreviews = 1;

# An SVG template to be used as apology template (shown just after the opening credits when technical issues occurred. Should have the same nominal dimensions (in pixels) as the video assets.
#$apology_template = undef;

# The authorized_keys file that sreview-keys should manage. If set to undef, the default authorized_keys file will be used.
#$authkeyfile = undef;

# The DBI connection string used to connect to the database
$dbistring = 'dbi:Pg:dbname=sreview;host={{ sreview.dbhost }};sslmode=require;user=sreview;password={{ sreviewdbpw }}';

# The data for the From: header in the email. Required if notify_actions includes email.
#$email_from = undef;

# The data for the Subject: header in the email. Required if notify_actions includes email.
#$email_subject = undef;

# A filename of a Mojo::Template template to process, returning the email body. Required if notify_actions includes email.
#$email_template = undef;

# The default event to handle in the webinterface. Ignored by all other parts of sreview.
$event = '{{ conference_name }}';

# A Mojo::Template that generates an event URL. Used by the /released metadata URL
#$eventurl_format = undef;

# The profile that is used for input videos.
$input_profile = 'DebConf';

# A filename pattern (glob) that tells SReview where to find new files
$inputglob = '/srv/{{nfs_server}}/video/debian/debconf/dv//*/*/*';

# An array of things to do when notifying. Can contain one or more of: email, command.
#$notify_actions = [];

# An array of commands to run. Each component is passed through Mojo::Template before processing. To avoid quoting issues, it is a two-dimensional array, so that no shell will be called to run this.
#$notify_commands = [
#  [
#    'echo',
#    '<%== $title %>',
#    'is',
#    'available',
#    'at',
#    '<%== $url %>'
#  ]
#];

# An array of profiles, one for each encoding, to be used for output encodings
#$output_profiles = [
#  'webm'
#];

# An array of fields to be used to create subdirectories under the output directory.
$output_subdirs = [
  'event',
  'date'
];

# The base directory under which SReview should place the final released files
#$outputdir = '/srv/sreview/output';

# A regular expression to parse a filename into year, month, day, hour, minute, second, and room
$parse_re = '.*\\/(?<room>[^\\/]+)\\/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})\\/(?<hour>\\d{2})_(?<minute>\\d{2})_(?<second>\\d{2})';

# A PNG file to be used as closing credits. Will only be used if no postroll_template was defined. Should have the same dimensions as the video assets.
#$postroll = undef;

# An SVG template to be used as closing credits. Should have the same nominal dimensions (in pixels) as the video assets.
$postroll_template = '/var/lib/sreview/postroll.svg';

# An SVG template to be used as opening credits. Should have the same nominal dimensions (in pixels) as the video assets.
$preroll_template = '/var/lib/sreview/preroll.svg';

# The extension used by previews (webm or mp4). Should be autodetected in the future, but...
#$preview_exten = 'webm';

# The directory on the file system where files served by the webinterface should be stored
$pubdir = '/srv/{{ nfs_server }}/sreview/web/public';

# A maximum number of jobs that should be submitted in a single loop in sreview-dispatch. 0 means no limit.
$query_limit = 0;

# The directory to which the output of scripts should be redirected
$script_output = '/var/lib/sreview/tmp/gridengine-out';

# A random secret key, used to encrypt the cookies.
#$secret = '_INSECURE_DEFAULT_REPLACE_ME_';

# A hash that tells SReview what to do with a talk when it is in a given state. Mojo::Template is used to transform these.
$state_actions = {
  'cutting' => 'qsub -cwd -V -q hiprio.q -e <%== $output_dir %> -o <%== $output_dir %> -b y -N cut_<%== $talkid %> sreview-cut <%== $talkid %>',
  'generating_previews' => 'qsub -cwd -V -q hiprio.q -e <%== $output_dir %> -o <%== $output_dir %> -b y -N prv_<%== $talkid %> sreview-previews <%== $talkid %>',
  'notification' => undef,
  'transcoding' => 'qsub -cwd -V -q lowprio.q -e <%== $output_dir %> -o <%== $output_dir %> -b y -N trn_<%== $talkid %> sreview-transcode <%== $talkid %>',
  'uploading' => undef,
};

# An array of commands to run on each file to be uploaded. Each component is passed through Mojo::Template before processing. To avoid quoting issues, it is a two-dimensional array, so that no shell will be called to run this.
#$upload_actions = [
#  [
#    'echo',
#    '<%== $file %>',
#    'ready for upload'
#  ]
#];

# If set, used with parse_re in an s///g command to produce an input URL
#$url_re = undef;

# The URL on which SReview runs. Note that this is used by sreview-notify to generate URLs, not by sreview-web.
#$urlbase = '';

# The URL prefix to be used for video data files
$vid_prefix = 'https://{{ sreview.wwwhostname }}';

# A directory where encoder jobs can create a subdirectory for temporary files
$workdir = '/var/lib/sreview/tmp';

# Do not remove this, perl needs it
1;
