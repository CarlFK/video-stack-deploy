# {{ ansible_managed }}

our $config;

$config->{dbistring} = "dbi:Pg:dbname=sreview;host={{ ge.master }};sslmode=require;user=sreview;password={{ sreviewdbpw }}";

# Where the gridengine stdout/stderr files should be stored
my $output_dir = "/srv/{{ nfs_server }}/sreview/gridengine-io";

my $state = {};

# Example script definitions for using gridengine

# The maximum number of jobs that the job dispatcher will query in one
# go. Set to a negative value to indicate no limit.
$config->{query_limit} = -1;

# The job which transforms the raw input data into a raw work file that
# the high-quality jobs transcode to. This should preferably use a
# "copy" operation for the video and audio codecs, if at all possible.
sub space_reqd($$$) {
	my $length = shift;
	my $room = shift;
	my $margin_mul = shift;
	my $length_total = $length + (60 * 40);
	my $length_margin = $length_total * $margin_mul;
	my $size_mbit = $length_margin * 2_000_000;
	my $size_mbyte = $size_mbit / 8;
	my $building = substr($room, 0, 1);
	$building = lc($building);
	return ($size_mbyte, $building);
}
$state->{files_found} = sub {
	my ($talkid, $room, $length) = @_;
	my ($size_reqd, $building) = space_reqd($length, $room, 2);
	#return "qsub -cwd -V -b y -N cut_talk_$talkid -l cutting -l pubip -l srvfree_${building}=${size_reqd} -l tmpfree=${size_reqd} -o $output_dir -e $output_dir /usr/bin/perl cut_talk/fosdem $talkid";
	return "qsub -cwd -V -b y -q hiprio.q -N cut_talk_$talkid -l pubip -l srvfree_${building}=${size_reqd} -l tmpfree=${size_reqd} -o $output_dir -e $output_dir /usr/bin/perl cut_talk/fosdem $talkid";
};
# This should generate a low-quality preview version of the cut talk
$state->{cut_ready} = sub {
	my ($talkid, $room, $length) = @_;
	return "qsub -cwd -V -b y -q hiprio.q -N previews_$talkid -o $output_dir -e $output_dir /usr/bin/perl previews/fosdem $talkid";
};
# This job should transcode the output of the above into all other video
# formats.
$state->{review_done} = sub {
	my ($talkid, $room, $length) = @_;
	my ($size_reqd, $building) = space_reqd($length, $room, 1.5);
	return "qsub -cwd -V -b y -q lowprio.q -N transcode_$talkid -l srvfree_${building}=${size_reqd} -l tmpfree=${size_reqd} -o $output_dir -e $output_dir /usr/bin/perl transcode/fosdem $talkid";
};
# This job should do whatever is necessary to release the given video
# onto the given URL.
$state->{waiting} = sub {
       	my ($talkid, $room, $length) = @_;
       	return "qsub -cwd -V -b y -q hiprio.q -N upload_$talkid -l pubip -o $output_dir -e $output_dir /usr/bin/perl upload/fosdem $talkid";
};

$state->{needs_notify} = sub { my ($talkid, $room, $length) = @_; return "/usr/bin/perl notify/notify_email $talkid"; };

# Script definitions for running things directly (disabled by default)

## We limit the job dispatcher to running one job at a time, so that
## multiple hosts may perform work
# $config->{query_limit} = 1
## We just run everything else directly, without any qsub stuff
# $state->{files_found} = sub { my $talkid = shift; return "./cut_talk $talkid"; };
# $state->{cut_ready} = sub { my $talkid = shift; return "./previews $talkid"; };
# $state->{transcode} = sub { my $talkid = shift; return "./transcode $talkid"; };
# $state->{upload} = sub { my $talkid = shift; return "./upload $talkid"; };

$config->{state} = $state;

# Definitions for things that don't depend on how jobs are ran.

# Glob for new, raw, recorded files
$config->{inputglob} = "/var/www/dump/*/*.flv.mp4";
# Subroutine that parses a filename into a room, starting day, starting hour,
# and URL
$config->{parse_raw} = sub($) {
	my $file = shift;
	my $hostname = "{{ ansible_hostname }}"; # need to update (from ansible) "streambackendX" to whatever the correct FQDN is.
	return undef unless $file =~ /.*\/(([^\/]*)\/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2}).flv.mp4)/;
	return ($2, "$3-$4-$5", "$6:$7:$8", "http://$hostname/$1");
};
# Where temporary (job-internal) files should be saved. This can safely be a
# local per-node scratch directory.
$config->{workdir} = "/tmp/";
# Where the webapp "public" directory is found
$config->{pubdir} = "/srv/sreview";
# Where the output files should be stored. It gets the following parameters:
# - event name
# - room name
# - day
# Note that these are not sanity-checked. You may want to do so yourself.
$config->{outputdir} = sub($$$) {my ($event, $room, $day) = @_; $event =~ s/\W/_/g; $room =~ s/\W/_/g; return "/srv/sreview/output/$event/$room/$day"};

$config->{urlbase} = "https://{{ sreview.wwwhostname }}/";

$config->{preroll_template} = "/srv/sreview/assets/video_front.svg";
$config->{postroll_template} = "/srv/sreview/assets/video_logos.svg";

1;
