# {{ ansible_managed }}
#
proxy_cache_path {{ streaming.frontend.data_root }}/hls levels=1:2 keys_zone=hls-cache:8m max_size=1000m inactive=600m;

geoip_country /usr/share/GeoIP/GeoIP.dat;
geoip_city /usr/share/GeoIP/GeoLiteCity.dat;

geo $local {
  default 0;
{% for host in streaming.local_hosts %}
  {{ host }} 1;
{% endfor %}
}

server {
  listen 80;
  listen [::]:80;

  root {{ streaming.frontend.data_root }}/www;

  index index.html;

  server_name {{ streaming.frontend.server_names|join(' ') }};

  if ($local) {
    rewrite ^/redir/(.*) https://local.live.debconf.org/$1 redirect;
  }
  if ($geoip_city_continent_code) {
    rewrite ^/redir/(.*) https://$geoip_city_continent_code.live.debconf.org/$1 redirect;
  }
  rewrite ^/redir/(.*) https://eu.live.debconf.org/$1 redirect;

  location /live {
    # From http://enable-cors.org/server_nginx.html
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    if ($request_method = 'POST') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }
    if ($request_method = 'GET') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }
  }

  location ~ /live/(?<room>.*)-(?<segment>.*).ts$ {
    proxy_pass https://{{ streaming.backend.server_name }}/live/$room-$segment.ts;
    proxy_cache hls-cache;
    proxy_cache_valid 200 5m;
    proxy_cache_valid 404 5s;
  }

  location ~ /live/(?<room>.*).m3u8$ {
    proxy_pass https://{{ streaming.backend.server_name }}/live/$room.m3u8;
  }

  # XXX HACK (olasd): Add a static proxy for nginx to actually resolve the
  # backend name on startup instead of barfing for lack of resolver
  location = /live/.resolver_hack {
    return 404;
    proxy_pass https://{{ streaming.backend.server_name }}/live/.resolver_hack;
  }

  location = /local-server {
    if ($local) {
      return 200 local;
    }
    if ($local = 0) {
      return 200 $geoip_city_continent_code;
    }
    add_header 'Content-Type' 'text/plain';
    add_header 'Access-Control-Allow-Origin' '*';
  }

  listen 443 ssl;
  ssl_certificate /etc/letsencrypt/live/{{ streaming.frontend.server_names|first }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ streaming.frontend.server_names|first }}/privkey.pem;
  ssl_session_cache shared:le_nginx_SSL:1m;
  ssl_session_timeout 1440m;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;

  ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES256-SHA256 EDH-RSA-DES-CBC3-SHA"; # managed by Certbot

  # Redirect non-https traffic to https
  if ($scheme != "https") {
    return 301 https://$host$request_uri;
  }
}
